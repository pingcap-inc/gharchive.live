/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CoreSchemaMetaSchema =
  | {
      $id?: string;
      $schema?: string;
      $ref?: string;
      $comment?: string;
      title?: string;
      description?: string;
      default?: true;
      readOnly?: boolean;
      writeOnly?: boolean;
      examples?: true[];
      multipleOf?: number;
      maximum?: number;
      exclusiveMaximum?: number;
      minimum?: number;
      exclusiveMinimum?: number;
      maxLength?: number;
      minLength?: number;
      pattern?: string;
      additionalItems?: CoreSchemaMetaSchema;
      items?: CoreSchemaMetaSchema | [CoreSchemaMetaSchema, ...CoreSchemaMetaSchema[]];
      maxItems?: number;
      minItems?: number;
      uniqueItems?: boolean;
      contains?: CoreSchemaMetaSchema;
      maxProperties?: number;
      minProperties?: number;
      required?: string[];
      additionalProperties?: CoreSchemaMetaSchema;
      definitions?: {
        [k: string]: CoreSchemaMetaSchema;
      };
      properties?: {
        [k: string]: CoreSchemaMetaSchema;
      };
      patternProperties?: {
        [k: string]: CoreSchemaMetaSchema;
      };
      dependencies?: {
        [k: string]: CoreSchemaMetaSchema | string[];
      };
      propertyNames?: CoreSchemaMetaSchema;
      const?: true;
      enum?: [true, ...unknown[]];
      type?:
        | ("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")
        | [
            "array" | "boolean" | "integer" | "null" | "number" | "object" | "string",
            ...("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")[]
          ];
      format?: string;
      contentMediaType?: string;
      contentEncoding?: string;
      if?: CoreSchemaMetaSchema;
      then?: CoreSchemaMetaSchema;
      else?: CoreSchemaMetaSchema;
      allOf?: [CoreSchemaMetaSchema, ...CoreSchemaMetaSchema[]];
      anyOf?: [CoreSchemaMetaSchema, ...CoreSchemaMetaSchema[]];
      oneOf?: [CoreSchemaMetaSchema, ...CoreSchemaMetaSchema[]];
      not?: CoreSchemaMetaSchema;
      [k: string]: unknown;
    }
  | boolean;

export interface QuerySchema {
  /**
   * Query name, default is generated base on the file path.
   */
  name?: string;
  /**
   * Indicating if the query is private.
   */
  private?: boolean;
  /**
   * Query description for documentation.
   */
  description?: string;
  /**
   * Specify how to implement caching, NORMAL_TABLE are used by default.
   */
  cacheProvider?: "NORMAL_TABLE" | "CACHED_TABLE";
  /**
   * Cache time in hours, -1 indicates that the query cache will not expire.
   */
  cacheHours: number;
  /**
   * Specify which queue is used to execute prefetch job. The default is MAIN.
   */
  refreshQueue?: string;
  /**
   * The CRON expressions that control when the refresh cache task is executed.
   */
  refreshCron?: string | ConditionalRefreshCrons;
  /**
   * Refresh cache time in hours, -1 indicates not to refresh.
   */
  refreshHours?: number | ConditionalHours;
  /**
   * Only return data from the cache.
   */
  onlyFromCache?: boolean;
  /**
   * Query params declaration.
   */
  params: Params[];
  resultSchema?: CoreSchemaMetaSchema;
}
export interface ConditionalRefreshCrons {
  param: string;
  on: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string;
  };
}
export interface ConditionalHours {
  param: string;
  on: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: number;
  };
}
export interface Params {
  /**
   * URL Search param name for the query.
   */
  name: string;
  /**
   * Param description for documentation
   */
  description?: string;
  /**
   * Define the parameter type.
   */
  type?: "array" | "date-range" | "collection" | "employees";
  /**
   * Define the parameter corresponding column name.
   */
  column?: string;
  /**
   * Set in date-range should use that moment as `to` time.
   */
  dateRangeTo?: "now" | "last-valid-datetime";
  /**
   * Define substring in the query sql template. Replacing uses `String.replaceAll`, please make sure the replacing substring is not substring of other texts.
   */
  replaces: string;
  /**
   * Replacing templates, mapped by search value
   */
  template?: {
    [k: string]: string;
  };
  /**
   * Default input value.
   */
  default?: number | string;
  /**
   * Enums for prefetching and validating, default is no prefetching and validating.
   */
  enums?: string | string[];
  /**
   * Regular expression for validating parameter value.
   */
  pattern?: string;
}
